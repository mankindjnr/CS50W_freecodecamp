The requests library is used for making HTTP requests to a specified url.
when one makes a request to a url, it sends back a response and the request library
    has inbuilt functionality to process requests and responses.

requests library is key in the use of REST API's and web scrapping

MAKING A REQUEST

it has inbuilt methods to make http requests to specified urls using get, post, put and delete requests.
http requests are meant to either retrieve data, create data, update data or delete it.
its a request-response protocol between a client and a server.

DEMONSTRATION OF MAKING A GET REQUEST TO AN ENDPOINT

GET - is used to retrieve information from the given server using a given url.
The GET method sends the encoded user information appended to the page request.
    the page and the encoded information are separated by the "?" character.

            https://www.google.com/search?q=hello

MAKE GET REQUESTS THROUGH PYTHON REQUESTS
python requests module provides the get() for making get requests

    requests.get(url, params={key: value}, args)

    MAKING A REQUEST TO GITHUBS API

        import requests

        #making the GET request
        resp = requests.get('https://api.github.com/users/mankindjnr')

        #checking the status code for response received
        print(resp)

        #print content of request
        print(resp.content)

        #the above code has been run successfully in request_trial.py file

GET - used to retrieve informatio from the giveen server using a given URL

POST - it requests that a web server accepts the data enclosed in the body of the request
        message, most likely for storing it.

PUT - it requests that the enclosed entity be stored under the supplied URL. if the URL refers
        to an already existing resource, it is modified and if the URL does not point to an 
        existing  resource, then the server can create the resource with that URL

DELETE - It deletes the specified resource

HEAD - this method asks for a response identical to that of a GET request, but without the bosy
 
PATCH - modifies the capabilities. it only requires to contain the changes to the resource
    not the complete resource.

RESPONSE OBJECT

when you make a request to a url, you get a response back. The response object in python
    is returned by requests.method() - the method are  - get, post, put and delete.

Response has alot of functions and attributes that assist in normalizing data or creating ideal
    portions of code.

    response.status_code - returns the status code from the header itself and one can
        check if the request was processes successflly or not.

        import requests

        # making a get request
        response = requests.get("https://api.github.com/")

        # print request object
        print(response.url)

        # print status code
        print(response.status_code)

AT TIMES YOU MAY NEED TO PROVIDE AUTHORIZATION TO MAKE PYTHON REQUESTS. THIS IS HOW YOU DO IT.

AUTHENTICATION USING PYTHON REQUESTS

        import requests
        from requests.auth import HTTPBasicAuth

        # making the request with username and the password for auth
        response = requests.get("https://api.github.com/user, ", auth = HTTPBasicAuth("username", "password"))

        print(response)